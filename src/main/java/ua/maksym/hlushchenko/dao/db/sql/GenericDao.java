package ua.maksym.hlushchenko.dao.db.sql;

import org.slf4j.*;
import ua.maksym.hlushchenko.exception.*;
import ua.maksym.hlushchenko.orm.annotations.*;

import java.lang.reflect.*;
import java.sql.*;
import java.util.*;

import static ua.maksym.hlushchenko.dao.db.sql.EntityUtil.*;
import static ua.maksym.hlushchenko.util.ReflectionUtil.*;

public class GenericDao<K, T> extends AbstractSqlDao<K, T> {
    private final String SQL_SELECT_ALL;
    private final String SQL_SELECT_BY_ID;
    private final String SQL_UPDATE_BY_ID;
    private final String SQL_INSERT;
    private final String SQL_DELETE_BY_ID;

    private final Class<T> entityClass;
    private final SqlMapper<T> mapper;

    private static final Logger log = LoggerFactory.getLogger(GenericDao.class);

    public GenericDao(Class<T> clazz, Connection connection) {
        super(connection);
        this.entityClass = clazz;

        mapper = new GenericMapper<>(clazz, connection);

        SQL_SELECT_ALL = GenericQueryCreator.generateQueryByMethodName(clazz, "findAll");
        SQL_SELECT_BY_ID = GenericQueryCreator.generateQueryByMethodName(clazz, "find");
        SQL_INSERT = GenericQueryCreator.generateQueryByMethodName(clazz, "save");
        SQL_UPDATE_BY_ID = GenericQueryCreator.generateQueryByMethodName(clazz, "update");
        SQL_DELETE_BY_ID = GenericQueryCreator.generateQueryByMethodName(clazz, "delete");
    }

    @Override
    protected T mapEntity(ResultSet resultSet) {
        return mapper.map(resultSet);
    }

    @Override
    public List<T> findAll() {
        return queryList(SQL_SELECT_ALL);
    }

    @Override
    public Optional<T> find(K id) {
        return querySingle(SQL_SELECT_BY_ID, id);
    }

    @Override
    public void save(T entity) {
        try {
            int keyGenType = Statement.NO_GENERATED_KEYS;
            List<Object> args = getColumnValuesOf(entityClass);

            Field idField = getDeclaredFieldsAnnotatedWith(entityClass, Id.class).get(0);
            if (idField.getAnnotation(Id.class).autoGenerated()) {
                keyGenType = Statement.RETURN_GENERATED_KEYS;
            }

            ResultSet resultSet = sqlQueryHelper.updateQueryWithKeys(
                    SQL_INSERT, keyGenType, args.toArray(new Object[0]));
            if (resultSet.next()) {
                Object generatedValue = resultSet.getObject(1, idField.getType());
                setValueTo(idField, generatedValue, entity);
            }
            resultSet.close();
        } catch (SQLException | EntityParserException e) {
            throw new DaoException(e);
        }
    }

    @Override
    public void update(T entity) {
        try {
            List<Object> args = getColumnValuesOf(entityClass);
            args.add(getIdValue(entity));
            sqlQueryHelper.updateQuery(SQL_UPDATE_BY_ID, args.toArray(new Object[0]));
        } catch (EntityParserException e) {
            throw new DaoException(e);
        }
    }

    @Override
    public void delete(K id) {
        sqlQueryHelper.updateQuery(SQL_DELETE_BY_ID, id);
    }
}
