package ua.maksym.hlushchenko.dao.db.sql;

import org.slf4j.*;

import ua.maksym.hlushchenko.dao.Dao;
import ua.maksym.hlushchenko.exception.*;

import java.sql.*;
import java.util.*;

abstract class AbstractSqlDao<K, T> implements Dao<K, T> {
    protected final Connection connection;

    private static final Logger log = LoggerFactory.getLogger(AbstractSqlDao.class);

    public AbstractSqlDao(Connection connection) {
        try {
            if (connection == null || connection.isClosed()) {
                throw new IllegalArgumentException();
            }
        } catch (SQLException e) {
            throw new IllegalArgumentException();
        }
        this.connection = connection;
    }

    protected abstract T mapToEntity(ResultSet resultSet);

    protected ResultSet query(String query, Object... args) {
        try {
            PreparedStatement statement = connection.prepareStatement(query);
            fillPreparedStatement(statement, args);
            log.info("Try to execute query:\n" + QueryUtil.formatSql(statement));
            return statement.executeQuery();
        } catch (SQLException e) {
            log.warn(e.getMessage());
            throw new DaoException("Failure to request entities", e);
        }
    }

    private static void fillPreparedStatement(PreparedStatement statement, Object... args)
            throws SQLException {
        for (int i = 0; i < args.length; i++) {
            statement.setObject(i + 1, args[i]);
        }
    }

    protected List<T> mappedQuery(String query, Object... args) {
        return mappedQuery(this::mapToEntity, query, args);
    }

    protected <U> List<U> mappedQuery(SqlMapper<U> mapper, String query, Object... args) {
        try (ResultSet resultSet = query(query, args)) {
            return mapResultSet(mapper, resultSet);
        } catch (SQLException e) {
            log.warn("Failure to close ResultSet");
            throw new DaoException("The ResultSet did not close", e);
        }
    }

    protected  <U> List<U> mapResultSet(SqlMapper<U> mapper, ResultSet resultSet)  {
        try {
            List<U> entities = new ArrayList<>();
            while (resultSet.next()) {
                U entity = mapper.map(resultSet);
                entities.add(entity);
            }
            return entities;
        } catch (SQLException | MappingException e) {
            log.warn(e.getMessage());
            throw new DaoException(e);
        }
    }

    protected void updateQuery(String query, Object... args) {
        updateQueryWithKeys(query, Statement.NO_GENERATED_KEYS,  args);
    }

    protected ResultSet updateQueryWithKeys(String query, int autoGeneratedKeys, Object... args) {
        try {
            PreparedStatement statement = connection.prepareStatement(query, autoGeneratedKeys);
            fillPreparedStatement(statement, args);
            log.info("Try to execute update:\n" + QueryUtil.formatSql(statement));
            statement.executeUpdate();
            if (autoGeneratedKeys == Statement.NO_GENERATED_KEYS) {
                statement.close();
                return null;
            }
            return statement.getGeneratedKeys();
        } catch (SQLException e) {
            log.warn(e.getMessage());
            tryToRollBack();
            throw new DaoException(e);
        }
    }

    private void tryToRollBack() {
        try {
            log.info("Try to roll back: " + connection);
            if (!connection.getAutoCommit()) {
                connection.rollback();
                log.info("Roll back successful");
            } else {
                log.warn("Autocommit is turned on");
            }
        } catch (SQLException e) {
            log.warn("Roll back failed: " + e.getMessage());
            throw new DaoException(e);
        }
    }

    protected String convertToResultColumn(String tableName, String columnName) {
        return "_" + tableName + "_" + columnName;
    }

    protected <C>  C extractColumn(ResultSet resultSet, String tableName, String columnName)
            throws SQLException {
        return (C) resultSet.getObject(convertToResultColumn(tableName, columnName));
    }
}
